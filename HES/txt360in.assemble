:READ  TXT360IN ASSEMBLE C1 WORK    3/26/19  22:00
         MACRO                                                          00000100
&NAME    CALL  &CS                                                      00000200
&NAME    L     15,=V(&CS)                                               00000300
         BALR  14,15                                                    00000400
         MEND                                                           00000500
         PRINT NOGEN                                                    00000600
TXT360IN ENTER                                                          00000700
         LA    R12,TRTDELIM        WORK AREAS WHICH WOULD               00000800
         USING TRTDELIM,R12        BE GETMAINED FOR REENTRANCY          00000900
         MVI   RETCODE+3,0       CLEAR OUT RETURN CODE                  00001000
         EXTRN SWAP       TO SAVE SOME SPACE                            00001100
         EXTRN TOPNODE,HYPRTEXT,BLKSIZE,TCBMSS                          00001200
         ENTRY CARD                                                     00001300
R0       EQU   0                                                        00001400
R1       EQU   1                                                        00001500
R2       EQU   2                                                        00001600
R3       EQU   3                                                        00001700
R4       EQU   4                                                        00001800
R5       EQU   5                                                        00001900
R6       EQU   6                                                        00002000
R7       EQU   7                                                        00002100
R8       EQU   8                                                        00002200
R9       EQU   9                                                        00002300
R10      EQU   10                                                       00002400
R11      EQU   11                                                       00002500
R12      EQU   12                                                       00002600
R13      EQU   13                                                       00002700
R14      EQU   14                                                       00002800
R15      EQU   15                                                       00002900
         LA    R11,INAREA+160      ADDRESS OF NEXT SCANABLE CHARACTER   00003000
         L     R2,0(R1)            POINT AT LENGTH & LABEL PARM         00003100
         LH    R1,0(R2)            GET LABEL LENGTH                     00003200
         BCTR  R1,0                DECREMENT FOR EX                     00003300
         LTR   R1,R1               IF NO PARM,                          00003400
         BL    OPEN                NO INITIAL LABEL FROM THIS SOURCE    00003500
         CLI   2(R2),C'¢'                                               00003600
         BNE   INITLB                                                   00003700
         MVI   TRTDELIM+C'¢',X'0C'                                      00003800
         B     OPEN                                                     00003900
INITLB   SH    R11,=H'7'           TO START SCAN AT LABEL               00004000
         EX    R1,MOVELBL          EXTRACT LABEL TO FIELD 'LABEL'       00004100
OPEN     OPEN  (HYPRTEXT,(INOUT),CARD,(INPUT)) OPEN DCBS                00004200
         L     R1,16               *                                    00004300
         L     R1,0(R1)            *                                    00004400
         L     R1,4(R1)            *                                    00004500
         L     R0,24(R1)           * SET UP TCBMSS                      00004600
         L     R1,=A(TCBMSS)       * TO POINT TO BOUNDARY BOX           00004700
         ST    R0,0(R1)            *                                    00004800
         L     R1,=A(BLKSIZE)      PUT LENGTH OF BLOCK                  00004900
         LH    R1,0(R1)            IN R1                                00005000
         S     R1,=F'1000'         LEAVE ROOM FOR EDIT EXPANSIONS       00005100
         ST    R1,PAGESIZE         AND RECORD PAGESIZE                  00005200
         SH    R1,=H'20'           INITIAL ORDERS PAGE SIZE             00005300
         STH   R1,INCR             AMOUNT TO BE ADDED TO ORDERS PAGE    00005400
         SH    R1,=H'70'           INITIAL DATA PAGE SIZE = 90          00005500
         STH   R1,INCR+2           INCREMENT TO DATA PAGE SIZE          00005600
* READ IN TOPNODE AND AVS                                               00005700
         READ  NODEIN,SF,HYPRTEXT,TOPNODE                               00005800
         CHECK NODEIN                                                   00005900
* MOVE AVS INFO INTO TABLE                                              00006000
         L     R1,=A(TOPNODE)      WHERE TO MOVE FROM                   00006100
         L     R3,=V(NXTHOLE)                                           00006200
         MVC   0(256,R3),900(R1)                                        00006300
         MVC   256(256,R3),1156(R1)                                     00006400
         MVC   512(256,R3),1412(R1)                                     00006500
         MVC   768(40,R3),1668(R1)                                      00006600
* SEE IF SYSTEM IS EMPTY                                                00006700
         MVI   BLOCK+4,X'40'       OP FOR RETRIEVE (PAGE 0)             00006800
         LA    R1,BLOCK            CALL CONV FOR PARAM LIST             00006900
         CALL  MAINTAIN            TRY TO RETRIEVE                      00007000
         LTR   R15,R15             CHECK RETURN CODE                    00007100
         BE    NOTEMPTY            ADDING TO OLD FILE                   00007200
* CREATE LABEL TABLE AND VERSION FILE                                   00007300
         MVI   BLOCK+4,X'80'       OP FOR CREATE                        00007400
         MVI   BLOCK+7,8           NEED A LENGTH AND A COUNT FIELD      00007500
         CALL  MAINTAIN                                                 00007600
         L     R2,=V(VFADD)        FIND WHERE TO STORE ADDR OF VF       00007700
         L     R3,BLOCK+8          PICK UP ADDR OF NEW VF               00007800
         ST    R3,0(R2)            AND GIVE TO SERVICE ROUTINES         00007900
         XC    0(8,R3),0(R3)       ZERO LENGTH AND COUNT FIELDS         00008000
         MVI   3(R3),4             LENGTH (NOT INCLUDING COUNT FLD) = 4 00008100
         OI    BLOCK+3,1           PREPARE TO CREATE PAGE 1             00008200
         CALL  MAINTAIN                                                 00008300
         L     R2,=V(LABTABAD)     FIND WHERE TO STORE ADDR OF LABTABLE 00008400
         L     R3,BLOCK+8          PICK UP ADDR OF NEW LABTAB           00008500
         ST    R3,0(R2)            AND GIVE TO SERVICE ROUTINES         00008600
         MVC   0(4,R3),=X'00000004' LENGTH = 4                          00008700
         LA    R1,2                COUNTER STARTS AT 2                  00008800
         B     ENTLAB              BEGIN BY ENTERING LABEL IN TABLE     00008900
NOTEMPTY L     R1,BLOCK+8          ADDRESS OF VF                        00009000
         L     R3,=V(VFADD)                                             00009100
         ST    R1,0(R3)            GIVE ADDR OF VF TO SERVICE ROUTINES  00009200
         A     R1,0(R1)            POINT R1 AT COUNTER                  00009300
         L     R1,0(R1)            R1 CONTAINS COUNTER                  00009400
ENTLAB   L     R3,=V(COUNTER)                                           00009500
         ST    R1,0(R3)            GIVE COUNTER TO SERVICE ROUTINES     00009600
         MVI   BLOCK+4,0           CLEAR TOP BYTE OF PAGE NAME FIELD    00009700
         B     SCANRTN             START SCAN                           00009800
         EJECT                                                          00009900
CLEANUP  MVI   SWITCH,X'02'        FOR EXIT AFTER WRAP UP               00010000
ORDERS   TM    SWITCH,X'06'        CREATE NEW AND/OR WRAP UP OLD PAGES  00010100
         BO    NEWPAIR             ONLY CREATE NEW PAGES                00010200
         BM    NEWPAGES            AT LEAST WRAP UP OLD PAGES           00010300
         BCTR  R5,0                *                                    00010400
         SR    R5,R8               AMOUNT OF ROOM LEFT AFTER NEW ORDER  00010500
         BNL   ORDERM              IF WE HAVE ROOM, USE IT              00010600
* FIRST WRAP UP CURRENT PAGES AND THEN CREATE AND INITIALIZE NEW PAGES  00010700
NEWPAGES TM    SWITCH,X'09'        IF NOT STARTING FOOTNOTE             00010800
         BNO   NNEWFOOT            THEN DONT NEED CURRENT PAGE INFO     00010900
         STH   5,SAVEL+4           ROOM LEFT IN ORDERS PAGE             00011000
         STH   6,SAVEL+6           ROOM LEFT IN DATA PAGE               00011100
         MVC   SAVEL(4),BLOCK+4    PAGE NAME                            00011200
NNEWFOOT LR    R2,R3                                                    00011300
         BCTR  R2,0                FIND LAST ORDER                      00011400
         MVC   BYTE2+1(1),0(R2)    AND                                  00011500
         TR    BYTE2+1(1),TRLCODE  FIND ITS LENGTH - 1                  00011600
         SH    R2,BYTE2            POINT AT ITS BEGINNING               00011700
         OI    0(R2),X'80'         SET HIGH ORDER BIT OF OP CODE        00011800
         LM    R1,R2,BLOCK+12      GET SECTION BEGINNINGS               00011900
         SR    R3,R1               *                                    00012000
         ST    R3,4(R1)            *                                    00012100
         SR    R4,R2               *                                    00012200
         ST    R4,4(R2)            * FILL IN LENGTHS                    00012300
         SH    R4,=H'12'           *                                    00012400
         ST    R4,12(R2)           * PAGES NOW COMPLETE                 00012500
         TM    SWITCH+1,X'08'      IF NO LABEL TO INSERT IN LABTABLE    00012600
         BZ    TSHUT               THEN BRANCH AROUND INSERTION ROUTINE 00012700
         LA    R1,12               INCREMENT TO LABEL TABLE             00012800
         CALL  GETTAB              MAKE SURE THERES ROOM & POINT TO IT  00012900
         L     R3,0(R1)            LENGTH                               00013000
         LA    R2,12(R3)           INCREMENT                            00013100
         ST    R2,0(R1)            & STORE BACK                         00013200
         AR    R3,R1               ROOM FOR NEW LABEL                   00013300
         LR    R2,R3               IMAGINARY HICORE ENTRY               00013400
         SH    R1,=H'8'            IMAGINARY LOCORE ENTRY               00013500
* WHENEVER CONTROL PASSES TO BISECTAB, R1 POINTS TO LOCORE LABEL,       00013600
* AND R2 TO HICORE LABEL OF INTERVAL TO BE BISECTED.                    00013700
BISECTAB LR    R5,R2                                                    00013800
         SR    R5,R1               FIND LENGTH OF INTERVAL              00013900
         SR    R4,R4               FOR DIVDIE                           00014000
         D     R4,=F'24'           NUMBER OF ENTRIES IN HALF INTERVAL   00014100
         LTR   R5,R5               IF TOLERANCE MET                     00014200
         BE    BISECTED            THEN BRANCH OUT                      00014300
         MH    R5,=H'12'           CONVERT ENTRIES TO BYTES             00014400
         AR    R5,R1               MIDDLE ENTRY                         00014500
         CLC   LABSAVE,0(R5)       COMPARE LABELS                       00014600
         BL    LOCORE              TOWARDS BEGIN OF ALPHABET            00014700
HICORE   LR    R1,R5               LOCORE END IS MIDDLE                 00014800
         B     BISECTAB            REITERATE                            00014900
LOCORE   LR    R2,R5               HICORE END IS MIDDLE                 00015000
         B     BISECTAB            REITERATE                            00015100
BISECTED CR    R2,R3               IF AVAILABLE SPACE THE RIGHT SPACE   00015200
         BE    PUTINLAB            THEN PUT LABEL IN IT                 00015300
         SH    R3,=H'12'           ELSE MAKE IT ONE SPACE EARLIER       00015400
         MVC   12(12,R3),0(R3)     LIKE SO                              00015500
         B     BISECTED            AND TRY AGAIN                        00015600
PUTINLAB MVC   0(6,R2),LABSAVE     PUT LABEL IN TABLE                   00015700
         MVC   8(4,R2),BLOCK+4     AND ASSOCIATE WITH PAGE NAME         00015800
TSHUT    CLI   SWITCH,X'02'        TEST FOR SHUTDOWN FLAG               00015900
         BE    SHUTDOWN            LAST PAGES HAVE BEEN COMPLETED       00016000
* NEW PAGES COME EMPTY EXCEPT FOR A SINGLE CHARACTER STRING             00016100
NEWPAIR  TM    SWITCH+1,X'28'      IF FOOTNOTE JUST ENDED               00016200
         BM    OLDPAGE             RESTORE OLD MAIN AREA PAGE           00016300
         BO    OLDDPAGE            RESTORE CURRENT MAIN AREA PAGE       00016400
         CALL  CREATEID            ASK FOR NEW PAGE PAIR                00016500
         L     R1,=V(VFADD)                                             00016600
         L     R1,0(R1)            R1 POINTS AT VF                      00016700
         A     R1,0(R1)                                                 00016800
         SH    R1,=H'4'            R1 POINTS AT NEW VF ENTRY            00016900
         MVC   BLOCK+5(3),1(R1)    KEEP IT FOR GETITEM                  00017000
         MVC   0(1,R1),SWITCH      * SET FLAGS IN VF ENTRY              00017100
         NI    0(R1),X'09'         *                                    00017200
         MVC   BLOCK+8(4),INCR     INCREMENTS TO PAGE SIZES             00017300
         L     R6,PAGESIZE         *                                    00017400
         SH    R6,=H'16'           * FIRST 16 BYTES ONLY NOT AVAILABLE  00017500
         LA    R5,4(R6)            * -- 12 BYTES IN ORDERS PAGE         00017600
         B     READIN              GO GET PAGES                         00017700
OLDDPAGE LM    R5,R6,SAVEM         RESTORE VACANCY LENGTHS              00017800
         STH   R5,BLOCK+8          INCREMENT TO ORDERS PAGE             00017900
         STH   R6,BLOCK+10         INCREMENT TO DATA PAGE               00018000
         B     RESETOLD            TO RESET SWITCHES                    00018100
OLDPAGE  MVC   BLOCK+4(8),SAVEL    SAVED PAGENAME AND LEFTOVER SIZES    00018200
         LH    R5,SAVEL+4          ROOM LEFT ON ORDERS PAGE             00018300
         LH    R6,SAVEL+6          ROOM LEFT IN DATA PAGE               00018400
RESETOLD NI    SWITCH+1,X'D7'      RESET END FOOTNOTE, LABEL SWITCHES   00018500
         L     R2,=V(IDTABLE)      IDTABLE SHOWS IN-CORE PAGES          00018600
         CLI   0(R2),X'FF'         IF NO PAGES IN CORE,                 00018700
         BE    READIN              READ IN SELECTED PAIR                00018800
IDTLOOP  CLC   BLOCK+5(3),1(R2)    IS THIS THE PAGE WE WANT             00018900
         MVC   BLOCK+12(8),4(R2)   GET PAGE ADDRESS--USUALLY WASTED     00019000
         BE    NREADIN             NOT WASTED, ANSWER WAS YES           00019100
         TM    4(R2),X'80'         WAS THIS LAST IN-CORE PAGE PAIR      00019200
         LA    R2,12(R2)           POINT AT NEXT ENTRY IN IDTABLE       00019300
         BNO   IDTLOOP             NO, REPEAT; YES, PAGES NOT IN CORE   00019400
READIN   LA    R1,BLOCK            FOR GETITEM                          00019500
         CALL  GETITEM             BRING NEW PAGES INTO CORE & EXPAND   00019600
NREADIN  LM    R3,R4,BLOCK+12      PAGE ADDRESSES                       00019700
         A     R3,PAGESIZE         *                                    00019800
         SR    R3,R5               * CURRENT ORDERS FILL ADDRESS        00019900
         A     R4,PAGESIZE         *                                    00020000
         SR    R4,R6               * CURRENT DATA FILL ADDRESS          00020100
         LR    R2,R3                                                    00020200
         BCTR  R2,0                FIND LAST ORDER                      00020300
         MVC   BYTE2+1(1),0(R2)    AND                                  00020400
         TR    BYTE2+1(1),TRLCODE  FIND ITS LENGTH - 1                  00020500
         SH    R2,BYTE2            POINT AT ITS BEGINNING               00020600
         NI    0(R2),X'7F'         RESET LAST ORDER BIT                 00020700
         NI    SWITCH,X'F1'        RESET NEW PAGE, AREA INDICATORS      00020800
         B     ORDERS              RETEST & RECOMPUTE VACANCY LENGTHS   00020900
ORDERM   EX    R8,MOVEORDR         MOVE IN ORDER                        00021000
         TRT   0(1,R3),TRDCODE     DOES ORDER NEED DISP FILLED IN       00021100
         BE    NDISP               IF NOT, THEN BRANCH AROUND           00021200
         CLI   0(R3),X'46'         *                                    00021300
         BE    NDISP               *                                    00021400
         LR    R2,R4                                                    00021500
         S     R2,BLOCK+16         COMPUTE DISPLACEMENT                 00021600
         SH    R2,=H'12'           RELATIVE TO FIRST SPACE AT PAGE + 12 00021700
         STH   R2,4(R3)            AND PUT IT IN ORDER                  00021800
NDISP    LA    R3,1(R8,R3)         INCREMENT ORDERS PTR                 00021900
         BR    R10                                                      00022000
DATA     BCTR  R6,0                *                                    00022100
         SR    R6,R8               AMOUNT OF ROOM LEFT IN DATA PAGE     00022200
         BL    ERROR               IF NONE, SOMETHING WENT VERY WRONG   00022300
         CH    R6,=H'160'          IF LT 160 BYTES, SET FLAG TO GET NEW 00022400
         BNL   *+8                 PAGES AT NEXT ORDER; ELSEBRANCH      00022500
         OI    SWITCH,X'84'        NEW ORDER AND NEW PAGES SWITCHES     00022600
         LR    R2,R3                                                    00022700
         SH    R2,=H'6'            R2 POINTS AT CURRENT LENGTH IN ORDER 00022800
         EX    R8,MOVEDATA         MOVE IN DATA                         00022900
         LA    R4,1(R8,R4)         INCREMENT DATA POINTER               00023000
         AH    R8,0(R2)            ADD OLD LENGTH                       00023100
         LA    R8,1(R8)            COMPENSATE FOR RECEIVING LENGTH-1    00023200
         STH   R8,0(R2)            REPLACE LENGTH                       00023300
         BR    R10                                                      00023400
         EJECT                                                          00023500
         BCTR  R11,0               POINT AT FIRST CHAR                  00023600
SCANRTN  SR    R1,R1                                                    00023700
         LR    R2,R1                                                    00023800
         TRT   0(256,R11),TRTDELIM FIND DELIMITER                       00023900
SPECRET  STM   R1,R2,SAVE                                               00024000
         TM    SWITCH+1,X'80'      IF SWITCH SET,                       00024100
         BO    NOMOVE-4            STRING IS TO BE IGNORED              00024200
         SR    R1,R11                                                   00024300
         BE    NOMOVE              IF NO TEXT, DONT CALL DATA MOVE      00024400
         TM    SWITCH,X'80'        IF SWITCH IS SET, NEED A             00024500
         BZ    NOORDER             NEW CHARACTER STRING ORDER,          00024600
         TM    SWITCH,X'70'        IF ANY SET,                          00024700
         BNZ   NOORDER             DONT INTERRUPT                       00024800
         NI    SWITCH,X'7F'        BUT NOT AGAIN UNTIL NEXT NON CHR STR 00024900
         LA    R7,STANDORD         * MOVE IT IN                         00025000
         LA    R8,7                *                                    00025100
         BAL   R10,ORDERS          *                                    00025200
NOORDER  LR    R7,R11              * AND MOVE IN DATA                   00025300
         L     R8,SAVE             *                                    00025400
         SR    R8,R11              *                                    00025500
         BCTR  R8,0                *                                    00025600
         BAL   R10,DATA            *                                    00025700
         L     R11,SAVE            *                                    00025800
NOMOVE   C     R11,=A(INAREA+80)   IF MORE THAN 80 CHARACTERS           00025900
         BL    NOREAD              LEFT, THEN DONT READ CARD            00026000
         BAL   R7,READ             READ CARD                            00026100
NOREAD   L     R1,SAVE+4           BRANCH TABLE FOR                     00026200
         LA    R11,1(R11)          TRT DETECT                           00026300
         SH    R1,=H'20'           IF NOT SPEC CODE                     00026400
         BNH   BT                  TAKE BRANCH                          00026500
         TM    SWITCH+1,X'80'      IF IGNORE IS SET                     00026600
         BO    SCANRTN             THEN IGNORE                          00026700
BT       B     *+20(R1)            * BRANCH TABLE                       00026800
         B     SCANRTN-2           ONLY TEXT WAS LEFT                   00026900
         B     CLEANUP             END OF DATA                          00027000
         B     LABELER             LABEL IN INPUT STREAM                00027100
         B     PLUSHIT             TRT HIT PLUS SIGN                    00027200
         B     MINUSHIT            TRT HIT MINUS SIGN                   00027300
         B     STARHIT             SINGLE CAP                           00027400
         B     ATHIT               BEGIN OR END CAPS                    00027500
         B     DOLARHIT            BEGIN OR END UNDERSCORE              00027600
         B     SLASHHIT            SPECIAL CHARACTER                    00027700
* PERIOD AND SEMICOLON CONDITIONAL HITS FOR DEFINED CODE SECOND STRING  00027800
         MVI   TRTDELIM+C'.',0     * RESET THESE SWITCHES        INSERT 00027900
         MVI   TRTDELIM+C':',0     *                                    00028000
         SR    R8,R8                                                    00028100
         LR    R7,R11                                                   00028200
         BCTR  R7,0                                                     00028300
         BAL   R10,DATA            MOVE THE PUNCTUATION IN              00028400
DEFSECST SH    R11,=H'10'          STRING TO BE INSERTED IS 10 CHARS    00028500
         MVC   0(10,R11),STRING    MOVE IN STRING                       00028600
         SR    R1,R1               FOR TRT                              00028700
         TRT   0(10,R11),TRTDELIM  FIND BEGIN AGAIN                     00028800
         BNE   *+8                 BRANCH IF FCN BYTE FOUND             00028900
         LA    R1,10(R11)          ELSE RESTORE TO NEXT CHAR            00029000
         LR    R11,R1              SET R11                              00029100
         B     SCANRTN                                                  00029200
         SPACE                                                          00029300
* HITS THAT REMAIN IN LEVEL 3A                                          00029400
STARHIT  MVI   AORD+1,1            TYPE 1 FORMAT                        00029500
NORMAL   LA    R10,SCANRTN         RETURN TO SCANRTN                    00029600
         TM    SWITCH,X'40'        IF STRING INTACT IS SET              00029700
         BOR   R10                 ABANDON THIS ORDER                   00029800
ONEINCR  OI    SWITCH,X'80'        SET NEW CHAR STR ORDER               00029900
         LA    R7,AORD             ADDRESS OF ORDER                     00030000
         LA    R8,3                LENGTH OF ORDER - 1                  00030100
         B     ORDERS              AFTER MOVE IN ORDER                  00030200
ATHIT    MVI   AORD+1,2            TYPE 2 FORMAT                        00030300
         CLI   0(R11),C'@'         IF NO SECOND @ --                    00030400
         BNE   NORMAL                                                   00030500
         MVI   AORD+1,4            TYPE 4 FORMAT                        00030600
TWOINCR  LA    R11,1(R11)          AND EXTRA CHAR SCANNED               00030700
         B     NORMAL              IF SECOND @                          00030800
DOLARHIT MVI   AORD+1,3            TYPE 3 FORMAT                        00030900
         CLI   0(R11),C'$'         IF NO SECOND $ --                    00031000
         BNE   NORMAL                                                   00031100
         MVI   AORD+1,5            TYPE 5 FORMAT AND EXTRA              00031200
         B     TWOINCR             CHAR SCANNED IF SECOND $             00031300
SLASHHIT CLI   0(R11),C'/'         IF WE HAVE TWO SLASHES               00031400
         BE    DSLASH              GET SPECIAL CHAR ORDER               00031500
         CLI   0(R11),C'0'         IF WE HAVE NUMBER                    00031600
         BNL   SUPERSC             IT IS SUPERSCRIPT                    00031700
         LA    R1,SSTABLE          POINT TO TABLE                       00031800
         BAL   R7,SEARCH           AND FIND APPROPRIATE ENTRY           00031900
         IC    R2,15(R1)           TYPE IS MULTIPLE OF 4                00032000
         MVC   AORD+1(1),14(R1)    FOR SOME TYPES, HAVE FMT NUMBER      00032100
         B     *+4(R2)             * BRANCH TABLE                       00032200
         B     PRIMEC              *  CHAR HAS LITERAL REPR IN HYP DS   00032300
         B     NORMAL              *  NEED ONLY TO MOVE IN ORDER        00032400
         B     CSPEC               *  NEEDS CODE 48, FURTHER SPEC       00032500
PRIMEC   BCTR  R11,0                                                    00032600
         MVC   0(1,R11),14(R1)                                          00032700
         LA    R1,1(R11)                                                00032800
         LA    R2,4                SPECIFY BROKEN STR                   00032900
         B     SPECRET             ORDINARY STR HANDLER                 00033000
SUPERSC  MVI   AORD+1,43           CODE FOR SUPERSCRIPTS                00033100
         BAL   R7,GETNUM           FIND WHAT NUMBER IT IS               00033200
         STC   R1,AORD+2           AND PUT IN SHORT FMT                 00033300
         B     NORMAL              MOVE IN FMT WORD                     00033400
CSPEC    MVC   AORD+2(1),14(R1)    QUALIFY SPECIAL CHAR                 00033500
         MVI   AORD+1,49           CODE FOR SPECIAL CHAR                00033600
         B     NORMAL              MOVE IN FMT WORD                     00033700
DSLASH   LA    R11,1(R11)          DONE LOOKING AT SECOND SLASH         00033800
         LA    R1,DSTABLE          POINT TO TABLE                       00033900
         BAL   R7,SEARCH           AND FIND ENTRY                       00034000
         MVC   AORD+2(1),15(R1)    QUALIFY SPECIAL CHAR                 00034100
         B     CSPEC+6             AND USE EXISTING CODE                00034200
         EJECT                                                          00034300
* ROUTINE COMMON TO BEGINNING LEVELS 3B AND 3C                          00034400
SECSTCHK TM    SWITCH,X'30'        IF BOTH + AND - ACTIVE,              00034500
         BZ    SCANRTN             (LEAVE IF NEITHER)                   00034600
         BM    HTEST-4             THEN ERROR                           00034700
         BCTR  R11,0               TO PRESERVE CULPRIT                  00034800
         B     ERROR               RECORD ERROR                         00034900
         NI    SWITCH,X'BF'        RESET STRING INTACT SWITCH           00035000
HTEST    NI    SWITCH+1,X'7F'      RESET STRING IGNORE SWITCH           00035100
         TM    SWITCH+1,X'40'      IF 'H' SWITCH OF DEFINED CODE OFF    00035200
         BZR   R7                  THEN RETURN                          00035300
         NI    SWITCH+1,X'BF'      ELSE RESET IT                        00035400
         BCTR  R11,0               DECREMENT R11                        00035500
         B     DEFSECST            AND INSERT SECOND STRING             00035600
         SPACE 2                                                        00035700
*****                                                                   00035800
* TRANSFER HERE ON SCANNING '+', TO ENTER OR LEAVE LEVEL 3B             00035900
*****                                                                   00036000
PLUSHIT  XI    SWITCH,X'20'        INVERT LEVEL 3B SWITCH               00036100
         BAL   R7,SECSTCHK         ALTER CODE, END OF DEFINED STRING    00036200
         BALR  R10,0               WHERE TO GO WHEN DONE (DEFAULT)      00036300
TABAD    C     R11,=A(INAREA+80)                                        00036400
         BL    *+8                                                      00036500
         BAL   R7,READ                                                  00036600
         LA    R1,PTABLE           TABLE OF ALTER CODES                 00036700
         BAL   R7,SEARCH           FIND ENTRY                           00036800
         IC    R2,15(R1)           TYPE IS MULTIPLE OF 4                00036900
         MVC   AORD+1(1),14(R1)    FOR SOME TYPES, HAVE FMT NUMBER      00037000
         B     *+4(R2)             * BRANCH TABLE                       00037100
         B     NORDHNDL            *  STRING FOLLOWS CLOSING +          00037200
         B     DEFINE              *  USER DEFINES OWN FMT CODE         00037300
         B     ONEINCR             *  NEED ONLY MOVE IN ORDER           00037400
         B     NUMBALT             *  NEED NUMBER FIRST                 00037500
         B     DATE                *  IGNORE STRING THAT FOLLOWS +      00037600
         B     PLUSHIT             *  TERMINATE LEVEL 3B                00037700
         B     SETTABER            *  STRING PRECEDES +                 00037800
         B     LISTHND             *  IGNORE STRINGS AROUND +           00037900
         BR    R10                 *  IGNORE BLANK                      00038000
LISTHND  OI    SWITCH+1,X'80'      IGNORE STRINGS TILL NEW SPEC CODE    00038100
         B     SCANRTN             GO SCAN THEM                         00038200
DATE     OI    SWITCH+1,X'80'      IGNORE STRINGS TILL NEW SPEC CODE    00038300
         B     ONEINCR+4           MOVE IN DATE FMT CODE                00038400
SETTABER LA    R10,SCANRTN         STRING SHOULD BE NEXT                00038500
         OI    SWITCH,X'80'        SET NEW STRING SWITCH                00038600
         B     *+8                 BUT DONT SET                         00038700
NORDHNDL OI    SWITCH,X'40'        INTACT SWITCH                        00038800
         MVC   NORD+1(1),14(R1)    SET LONG FMT ORDER CODE              00038900
         LA    R7,NORD             ADDRESS OF ORDER                     00039000
         LA    R8,7                LENGTH OF ORDER - 1                  00039100
         B     ORDERS              GO MOVE IN ORDER                     00039200
NUMBALT  BAL   R7,GETNUM           GET NUMBER TO                        00039300
         STC   R1,AORD+2           PUT IN SHORT FMT ORDER               00039400
         B     ONEINCR             AND GO MOVE IT IN                    00039500
DEFINE   BAL   R7,GETNUM           FIND WHICH DEFINED CODE              00039600
         N     R1,=F'15'           FOR SAFETY                           00039700
         BZ    ERROR               INVALID DEFINED CODE                 00039800
         NI    SWITCH+1,X'EF'      RESET S OCCURED SWITCH               00039900
         SLA   R1,5                32 BYTES PER CODE                    00040000
         LA    R9,DTABLE-32(R1)    POINT TO BLOCK FOR THIS ONE          00040100
         MVC   29(3,R1),=X'001900' INITIALIZE CONTROL FIELD             00040200
         LA    R8,29(R9)           WHERE TO FIND DISP                   00040300
         LA    R11,1(R11)          PAST '='                             00040400
         LA    R0,28(R9)           SAFETY LIMIT                         00040500
LOOPDEF  CLI   0(R11),C'0'         IF SCANNING NUMBER                   00040600
         LA    R10,1               ASSUME 1 CHARACTER MOVES             00040700
         BL    NNUMDEF             JUST KEEP SCANNING                   00040800
MVLPDEF  SR    R1,R1               CLEAR TOP 3 BYTES                    00040900
         IC    R1,0(R8)            GET DISP                             00041000
         CR    R1,R0               IF BEYOND SAFETY LIMIT               00041100
         BH    ERROR               THEN NOTE ERROR CONDITION            00041200
         LA    R2,0(R1,R9)         COMPUTE ADDRESS FOR MOVE             00041300
         MVC   0(1,R2),0(R11)      ALL TESTS MADE, MOVE IT IN           00041400
         LA    R1,1(R1)            INCREMENT DISP                       00041500
         STC   R1,0(R8)            AND STORE IT BACK                    00041600
         LA    R11,1(R11)          POINT TO NEXT CHAR                   00041700
         BCT   R10,MVLPDEF         TO MOVE CORRECT NUMBER OF CHARS      00041800
         B     LOOPDEF             TRY AGAIN                            00041900
NNUMDEF  LA    R1,DFTABLE          TABLE OF EDIT CODES FOR DEFINE       00042000
         BAL   R7,SEARCH           FIND ENTRY                           00042100
         IC    R2,15(R1)           TYPE IS MULTIPLE OF 4                00042200
         LA    R8,29(R9)           WHERE TO FIND DISP                   00042300
         B     *+4(R2)             * BRANCH TABLE                       00042400
         B     ORDCHAR             *  ORDINARY EDIT CODE                00042500
         B     HEADOPT             *  SET H SWITCH                      00042600
         B     SHND                *  SKIP EDIT CODE                    00042700
         B     HNDDOLAR            *  $                                 00042800
         B     ENDDEF              *  -                                 00042900
         B     HNDX                *  X                                 00043000
HNDAT    OI    31(R9),X'20'        *  @ SET FLAG                        00043100
         B     LOOPDEF             CONTINUE SCANNING                    00043200
HNDDOLAR OI    31(R9),X'40'        SET FLAG                             00043300
         B     LOOPDEF             CONTINUE                             00043400
HEADOPT  OI    31(R9),X'80'        SET FLAG                             00043500
         B     LOOPDEF             CONTINUE                             00043600
FIRSTS   OI    SWITCH+1,X'10'      NOTE THAT S HAS OCCURED              00043700
ORDCHAR  OI    31(R9),X'08'        SET FLAG                             00043800
         B     MVLPDEF             AND MOVE IT IN                       00043900
SHND     TM    SWITCH+1,X'10'      IF S HAS NOT OCCURED                 00044000
         BNO   FIRSTS              THIS IS FIRST S                      00044100
         OI    31(R9),X'10'        SET FLAG                             00044200
         LA    R8,30(R9)           WHERE TO FIND DISP                   00044300
         B     MVLPDEF             MOVE IT IN                           00044400
HNDX     LA    R10,2               NEED 2 CHARACTERS                    00044500
         B     ORDCHAR             MOVE THEM IN                         00044600
ENDDEF   CLI   29(R1),X'19'        IF FIRST STRING IS TO BIG            00044700
         BH    ERROR               THEN RECORD ERROR                    00044800
         OI    31(9),X'04'         VALID DEFINED CODE                   00044900
         B     PLUSHIT             END + HAS BEEN SCANNED               00045000
         EJECT                                                          00045100
*****                                                                   00045200
* TRANSFER HERE ON SCANNING '-', TO ENTER OR LEAVE LEVEL 3C             00045300
*****                                                                   00045400
MINUSHIT XI    SWITCH,X'10'        INVERT LEVEL 3C SWITCH               00045500
         BAL   R7,SECSTCHK         EDIT CODE, END OF DEFINED STRING     00045600
         BALR  R10,0               WHERE TO GO WHEN DONE                00045700
MITRR    C     R11,=A(INAREA+80)   IF MORE THAN 80 CHARACTERS           00045800
         BL    *+8                 LEFT, THEN DONT READ CARD            00045900
         BAL   R7,READ             READ CARD                            00046000
         LA    R1,MTABLE           TABLE OF EDIT CODES                  00046100
         BAL   R7,SEARCH           FIND ENTRY                           00046200
         IC    R2,15(R1)           TYPE IS MULTIPLE OF 4                00046300
         MVC   AORD+1(1),14(R1)    FOR SOME TYPES, HAVE FMT NUMBER      00046400
         B     *+4(2)              * BRANCH TABLE                       00046500
         B     SETTABER            *  STRING PRECEDES -                 00046600
         B     ONEINCR             *  NEED ONLY MOVE IN ORDER           00046700
         B     NUMBALT             *  NEED NUMBER FIRST                 00046800
         B     DEFINED             *  USER DEFINED EDIT CODE            00046900
         B     FOOTNOTE            *  FOOTNOTE                          00047000
         B     ENDFOOT             *  END FOOTNOTE                      00047100
         B     MINUSHIT            *  TERMINATE LEVEL 3C                00047200
         B     MITRR               *  IGNORE BLANK                      00047300
         MVC   AORD+2(1),0(R11)    *  X CODE, MOVE IN QUALIFIER         00047400
         LA    R11,1(R11)          INCREMENT PAST IT                    00047500
         BR    R10                 AND GO BACK FOR MORE                 00047600
DEFINED  BAL   R7,GETNUM           FIND WHICH DEFINED CODE              00047700
         BCTR  R11,0               LEAVE REST FOR LATER                 00047800
         MVI   0(R11),C'-'         REPLACE LEADING -                    00047900
         BCTR  R11,0                                                    00048000
         N     R1,=F'15'           FOR SAFETY                           00048100
         BZ    ERROR               INVALID DEFINED CODE                 00048200
         TM    31(R1),X'04'        IF USER HASNT DEFINED THIS CODE      00048300
         BZ    ERROR               THEN IT ISNT VALID                   00048400
         SLA   R1,5                                                     00048500
         LA    R1,DTABLE-32(R1)                                         00048600
         MVI   STRING,C' '                                              00048700
         MVC   STRING+1(9),STRING                                       00048800
         TM    31(R1),X'80'                                             00048900
         BO    HSPECD                                                   00049000
         MVI   TRTDELIM+C'.',X'28'                                      00049100
         MVI   TRTDELIM+C':',X'28'                                      00049200
         B     HEITHER                                                  00049300
HSPECD   OI    SWITCH+1,X'40'                                           00049400
HEITHER  TM    31(R1),X'10'                                             00049500
         LA    R7,STRING+9                                              00049600
         BNO   NOSECS                                                   00049700
         MVI   STRING+9,C'-'                                            00049800
         IC    R2,30(R1)                                                00049900
         SH    R2,=H'26'                                                00050000
         SR    R7,R2                                                    00050100
         BCTR  R2,0                                                     00050200
         EX    R2,MOVESECS                                              00050300
         BCTR  R7,0                                                     00050400
         MVI   0(R7),C'-'                                               00050500
         BCTR  R7,0                                                     00050600
NOSECS   TM    31(R1),X'40'                                             00050700
         BZ    NODOLARS                                                 00050800
         MVI   0(R7),C'$'                                               00050900
         BCTR  R7,0                                                     00051000
         MVI   0(R7),C'$'                                               00051100
         BCTR  R7,0                                                     00051200
         MVI   0(R11),C'$'                                              00051300
         BCTR  R11,0                                                    00051400
NODOLARS TM    31(R1),X'20'                                             00051500
         BZ    NOATS                                                    00051600
         MVI   0(R7),C'@'                                               00051700
         BCTR  R7,0                                                     00051800
         MVI   0(R7),C'@'                                               00051900
         MVI   0(R11),C'@'                                              00052000
         BCTR  R11,0                                                    00052100
NOATS    TM    31(R1),X'08'                                             00052200
         BZ    MINUSHIT                                                 00052300
         MVI   0(R11),C'-'                                              00052400
         IC    R2,29(R1)                                                00052500
         SR    R11,R2                                                   00052600
         BCTR  R2,0                                                     00052700
         EX    R2,MOVEFRST                                              00052800
         BR    R10                                                      00052900
LABELER  MVI   LABEL-1,X'06'       NOT INTERNAL LABEL                   00053000
         MVC   LABEL(6),0(R11)     THIS IS THE LABEL                    00053100
         LA    R11,6(R11)          SCAN INDEX                           00053200
         B     LABINS              ENTER LABEL                          00053300
FOOTNOTE TM    SWITCH,X'01'        DID WE FINISH THE LAST FOOTNOTE      00053400
         BZ    GOODFOOT            YES                                  00053500
         SH    R11,=H'3'           ELSE FINISH IT NOW                   00053600
         MVC   0(2,R11),=C'-Z'     TO FORCE IT TO FINISH                00053700
         B     ERROR               RECORD MISTAKE                       00053800
GOODFOOT MVI   LABEL-1,X'46'                                            00053900
         L     R1,=V(COUNTER)                                           00054000
         L     R2,0(R1)                                                 00054100
         CVD   R2,COUNT                                                 00054200
         ST    R2,FORD+4                                                00054300
         LA    R2,2(R2)                                                 00054400
         ST    R2,0(R1)                                                 00054500
         MVC   LABEL(6),FORD+4                                          00054600
         LR    R2,R4                                                    00054700
         S     R2,BLOCK+16                                              00054800
         SH    R2,=H'12'                                                00054900
         STH   R2,FORD+2                                                00055000
         LA    R7,FORD                                                  00055100
         LA    R8,11                                                    00055200
         BAL   R10,ORDERS                                               00055300
         MVI   0(R4),C'F'                                               00055400
         UNPK  1(5,R4),COUNT(8)                                         00055500
         OI    5(R4),X'F0'                                              00055600
         LA    R4,6(R4)                                                 00055700
         SH    R6,=H'6'                                                 00055800
         OI    SWITCH,X'8D'                                             00055900
LABINS   LA    R7,LABEL-1          LABEL ORDER TO BE MOVED IN           00056000
         LA    R8,7                ITS LENGTH - 1                       00056100
         BAL   R10,ORDERS          TO MOVE IN ORDER                     00056200
         MVC   LABSAVE,LABEL       SAVE LABEL FOR TABLE INSERT          00056300
         STM   R5,R6,SAVEM         CURRENT VACANCY LENGTHS              00056400
         OI    SWITCH,X'84'        NEW ORDER AND NEW PAGES SWITCHES     00056500
         OI    SWITCH+1,X'28'      LABTABLE INSERT SWITCHES             00056600
         TM    SWITCH,X'10'        IF BETWEEN MINUS SIGNS               00056700
         BO    MITRR-2             THEN CONTINUE SCANNING EDIT CODES    00056800
         B     SCANRTN             ELSE CONTINUE ORDINARY SCAN          00056900
ENDFOOT  TM    SWITCH,X'01'        IF NOT IN FOOTNOTE . . .             00057000
         BO    GEFT                                                     00057100
         BCTR  R11,0               SAVE REST OF EDIT CODE               00057200
         MVI   0(R11),C'-'                                              00057300
         B     ERROR               AND RECORD MISTAKE                   00057400
GEFT     NI    SWITCH,X'FE'        RESET FOOTNOTE SWITCH                00057500
         OI    SWITCH,X'84'                                             00057600
         XI    SWITCH+1,X'20'                                           00057700
         BR    R10                                                      00057800
* SERVICE ROUTINES FOR LEVEL 3 (SCAN)                                   00057900
SEARCH   SR    R2,R2                                                    00058000
         IC    R2,1(R1)                                                 00058100
         EX    R2,SERCHCLC                                              00058200
         BE    SEARCHFD                                                 00058300
         IC    R2,0(R1)                                                 00058400
         LTR   R2,R2                                                    00058500
         BH    GOODNTRY                                                 00058600
ERROR    SH    R11,=H'23'                                               00058700
         MVC   0(23,R11),=C'-S1->/X< ERROR >/X<-S1-'                    00058800
         NI    SWITCH,X'8F'                                             00058900
         LA    R7,SCANRTN                                               00059000
         B     HTEST                                                    00059100
GOODNTRY AR    R1,R2                                                    00059200
         B     SEARCH+2                                                 00059300
SEARCHFD SH    R1,=H'16'                                                00059400
         LA    R11,1(R2,R11)                                            00059500
         BR    R7                                                       00059600
GETNUM   SR    R1,R1                                                    00059700
         LR    R2,R1                                                    00059800
         CLI   0(R11),C'0'                                              00059900
         BLR   R7                                                       00060000
         NI    0(R11),X'0F'                                             00060100
         IC    R2,0(R11)                                                00060200
         MH    R1,=H'10'                                                00060300
         AR    R1,R2                                                    00060400
         LA    R11,1(R11)                                               00060500
         B     GETNUM+4                                                 00060600
         EJECT                                                          00060700
**********                                                              00060800
* LEVEL 4                                                               00060900
* CONTROL PASSES FROM LEVEL 3 WHEN FEWER THAN 81 CHARACTERS LEFT,       00061000
* AND RETURNS THERE TO RETEST                                           00061100
**********                                                              00061200
READ     GET   CARD,INAREA+160     READ A CARD                          00061300
         LA    R1,INAREA+159       INITIALIZE SEARCH FOR CARD END       00061400
INLOOP   LA    R1,1(R1)            INCREMENT INDEX                      00061500
         CLI   0(R1),C'/'          IF FIRST CHAR DOESNT CHECK           00061600
         BNE   INLOOP              THEN TRY AGAIN                       00061700
         CLI   1(R1),C' '          IF SECOND CHAR DOESNT CHECK          00061800
         BNE   INLOOP              THEN TRY AGAIN                       00061900
         SR    R1,R11              COMPUTE LENGTH - 1                   00062000
         LA    R2,INAREA+160       COMPUTE ADDRESS                      00062100
         SR    R2,R1               TO MOVE TO                           00062200
         EX    R1,MOVEREAD         R11 IS ADDRESS TO MOVE FROM          00062300
         MVI   INAREA+160,0        REPLACE '/' WITH 0 FOR END           00062400
         LR    R11,R2              NEW SCAN INDEX                       00062500
         SH    R7,=H'12'                                                00062600
         BR    R7                  DO WE HAVE ENOUGH YET                00062700
EOFSYSIN MVC   INAREA-1(80),INAREA+80                                   00062800
         MVI   INAREA+79,1                                              00062900
         SH    R11,=H'81'                                               00063000
         BR    R7                                                       00063100
SHUTDOWN L     R1,=V(VFADD)                                             00063200
         L     R1,0(R1)            R1 POINTS AT VF                      00063300
         LR    R2,R1               *                                    00063400
         A     R2,0(R1)            * R2 POINTS TO LAST ENTRY + 4        00063500
         MVI   0(R2),X'09'         SO LAST ENTRY WILL BE SO FLAGGED     00063600
         LR    R3,R2               FOR LOOP END COMPARE                 00063700
         LR    R4,R2               FOR FOOTNOTE PAGES                   00063800
LOOPDN   SH    R2,=H'4'            LOOK AT NEXT EARLIER ENTRY           00063900
         TM    0(R2),X'01'         IF NOT FOR FOOTNOTE                  00064000
         BZ    ENDTEST             LEAVE IT THERE, ELSE FIND            00064100
         SH    R4,=H'4'            WHERE TO MOVE IT                     00064200
         LR    R5,R2               INDEX FOR SHOVE, EMPTY ENTRY         00064300
         L     R6,0(R2)            FOOTNOTE ENTRY                       00064400
LOOPCHNG CR    R5,R4               IF WE HAVE DESTINATION FREE          00064500
         BE    LPCEND              GO STORE FOOTNOTE ENTRY              00064600
         MVC   0(4,R5),4(R5)       ELSE RIPPLE VACANCY * + 4 &          00064700
         LA    R5,4(R5)            INCREMENT SHOVE INDEX                00064800
         B     LOOPCHNG            ITERATE                              00064900
LPCEND   ST    R6,0(R4)            STORE FOOTNOTE ENTRY IN VACANCY      00065000
ENDTEST  CR    R2,R1               IF HAVENT LOOKED AT ALL VF           00065100
         BH    LOOPDN              KEEP SCANNING                        00065200
LOOPUP   LA    R2,4(R2)            INCREMENT 'LAST PAGE' SCAN INDEX     00065300
         NI    0(R2),X'F0'         CLEAR ANY LEFTOVERS                  00065400
         TM    4(R2),X'08'         IF NEXT PAGE NOT FIRST IN AREA       00065500
         BZ    *+8                 CONTINUE SCANNING ELSE               00065600
         MVI   0(R2),X'80'         THIS ONE MUST BE LAST IN AREA        00065700
         CR    R2,R3               IF HAVENT REACHED COUNT FIELD        00065800
         BL    LOOPUP              KEEP SCANNING                        00065900
* PUT EVERYTHING IN IDTABLE BACK OUT ON DISK                            00066000
         L     R2,=V(IDTABLE)                                           00066100
         MVI   BLOCK+4,X'60'                                            00066200
         LA    R1,BLOCK                                                 00066300
         CLI   0(R2),X'FF'                                              00066400
         BE    COMPDONE                                                 00066500
STORLOOP L     R3,0(R2)            GET PAGE NAME OUT OF IDTABLE         00066600
         L     R4,4(R2)                                                 00066700
         BAL   R8,STORER           STORE ORDERS PAGE ON DISK            00066800
         L     R4,8(R2)                                                 00066900
         LA    R3,1(R3)                                                 00067000
         BAL   R8,STORER           STORE DATA PAGE ON DISK              00067100
         MVI   0(R2),X'FF'         SET EMPTY TABLE FLAG                 00067200
         TM    4(R2),X'80'         IS THIS THE END OF TABLE?            00067300
         BO    COMPDONE            IF IT IS, BRANCH                     00067400
         LA    R2,12(R2)                                                00067500
         B     STORLOOP                                                 00067600
STORER   C     R3,0(R4)        NAME FROM IDTABLE VS NAME AT TOP OF PAGE 00067700
         BNE   GOODY           IF HAVE WRONG PAGE, BOMB OUT             00067800
         ST    R3,BLOCK        PUT PAGE NAME IN PARAM LIST FOR MAINTAIN 00067900
         L     R4,4(R4)        LENGTH OF PAGE (FROM ACTUAL PAGE)        00068000
         STH   R4,BLOCK+6      STORE LENGTH IN PARAM LIST               00068100
         CALL  MAINTAIN        CALL ROUTINE TO PASS PAGE OUT OF CORE    00068200
         BR    R8                                                       00068300
         EJECT                                                          00068400
GOODY    ABEND 10,DUMP                                                  00068500
COMPDONE SR    R2,R2                                                    00068600
         ST    R2,BLOCK                                                 00068700
         L     R5,=V(VFADD)                                             00068800
         L     R5,0(R5)                                                 00068900
         L     R4,0(R5)            LENGTH OF VF                         00069000
         AR    R5,R4               POINTS TO WHERE NEXT ENTRY GOES      00069100
         L     R3,=V(COUNTER)      GET NEXT ID NAME                     00069200
         L     R3,0(R3)                                                 00069300
         ST    R3,0(R5)            PUT COUNTER IN VF                    00069400
         LA    R4,4(R4)            INCREMENT LENGTH FOR VF (COUNTER)    00069500
         STH   R4,BLOCK+6                                               00069600
         CALL  MAINTAIN                                                 00069700
         L     R3,=V(LABTABAD)     ADDRESS OF ADDRESS                   00069800
         L     R2,0(R3)            GET ADDRESS OF LABEL TABLE           00069900
         L     R2,0(R2)            GET LENGTH OF LABEL TABLE            00070000
         STH   R2,BLOCK+6          LENGTH TO STORE                      00070100
         OI    BLOCK+3,X'01'       LABEL TABLE NAME = 0000001           00070200
         CALL  MAINTAIN            STORE LABEL TABLE                    00070300
         L     R10,=A(TOPNODE)                                          00070400
         L     R2,=V(NXTHOLE)                                           00070500
         MVC   900(256,R10),0(R2)                                       00070600
         MVC   1156(256,R10),256(R2)                                    00070700
         MVC   1412(256,R10),512(R2)                                    00070800
         MVC   1668(40,R10),768(R2)                                     00070900
         L     R10,=V(HYPRTEXT)                                         00071000
         MVC   33(3,R10),=AL3(CLOSE)                                    00071100
         LA    R6,256                                                   00071200
         ST    R6,INAREA                                                00071300
         POINT (R10),INAREA                                             00071400
         WRITE NODEOUT,SF,HYPRTEXT,TOPNODE                              00071500
         CHECK NODEOUT                                                  00071600
SEEKEND  READ  LOOPREAD,SF,HYPRTEXT,SWAP       SWAP IS IN MAINTAIN      00071700
         CHECK LOOPREAD                                                 00071800
         B     SEEKEND                                                  00071900
CLOSE    EQU   *                                                        00072000
RETURN   CLOSE (HYPRTEXT,,CARD)        CLOSE BOTH REGARDLESS OF RC      00072100
         L     15,RETCODE          LOAD RETURN CODE   IN 15             00072200
         L     13,4(13)                GET HSA                          00072300
         L     14,12(13)               DON'T RESTORE R15 (HAS RC)       00072400
         LM    0,12,20(13)             RESTORE REST                     00072500
         BR    14                      RETURN                           00072600
         SPACE 4                                                        00072700
CARD     DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EOFSYSIN,MACRF=(GM)          00072800
MOVELBL  MVC   INAREA+154(0),2(R2)                                      00072900
MOVEORDR MVC   0(0,R3),0(R7)                                            00073000
MOVEDATA MVC   0(0,R4),0(R7)                                            00073100
MOVEREAD MVC   0(0,R2),0(R11)                                           00073200
SERCHCLC CLC   0(0,R11),2(R1)                                           00073300
MOVESECS MVC   0(0,R7),26(R1)                                           00073400
MOVEFRST MVC   0(0,R11),0(R1)                                           00073500
         SPACE                                                          00073600
TRLCODE  DC    X'03070B0B00070703070703'                                00073700
TRDCODE  DC    X'0011000000110000111100'                                00073800
         EJECT                                                          00073900
         DC    C'-',X'00'                                               00074000
SSTABLE  DC    X'0500',C'S+'                                            00074100
         DC    X'000500',C'A*'                                          00074200
         DC    X'000500',C'X@'                                          00074300
         DC    X'000500',C'Q$'                                          00074400
         DC    X'000500',C'D/'                                          00074500
         DC    X'000500',C'Z'                                           00074600
         DC    X'2C040500',C'V'                                         00074700
         DC    X'2D040500',C'B'                                         00074800
         DC    X'2E040500',C'I'                                         00074900
         DC    X'00080500',C'P'                                         00075000
         DC    X'01080500',C'H'                                         00075100
         DC    X'02080500',C'L'                                         00075200
         DC    X'03080000',C'C'                                         00075300
         DC    X'11'                                                    00075400
DSTABLE  DC    X'0400',C'Z'                                             00075500
         DC    X'090400',C'O'                                           00075600
         DC    X'060400',C'V'                                           00075700
         DC    X'070400',C'B'                                           00075800
         DC    X'080400',C'C'                                           00075900
         DC    X'0A0400',C'F'                                           00076000
         DC    X'0B0400',C'G'                                           00076100
         DC    X'120400',C'H'                                           00076200
         DC    X'130400',C'J'                                           00076300
         DC    X'140400',C'Y'                                           00076400
         DC    X'150400',C'U'                                           00076500
         DC    X'160400',C'A'                                           00076600
         DC    X'170400',C'K'                                           00076700
         DC    X'180400',C'L'                                           00076800
         DC    X'0C0400',C'S'                                           00076900
         DC    X'0D0400',C'1'                                           00077000
         DC    X'0E0400',C'2'                                           00077100
         DC    X'0F0400',C'3'                                           00077200
         DC    X'100000',C'N'                                           00077300
         DC    X'0800'                                                  00077400
MTABLE   DC    X'0500',C'B'                                             00077500
         DC    X'09000500',C'G'                                         00077600
         DC    X'0A000500',C'V'                                         00077700
         DC    X'06040500',C'N'                                         00077800
         DC    X'07040500',C'P'                                         00077900
         DC    X'08040500',C'U'                                         00078000
         DC    X'09040500',C'C'                                         00078100
         DC    X'0A040500',C'A'                                         00078200
         DC    X'0B040500',C'D'                                         00078300
         DC    X'0C040500',C'E'                                         00078400
         DC    X'0D040500',C'K'                                         00078500
         DC    X'0E040500',C'L'                                         00078600
         DC    X'0F040500',C'Q'                                         00078700
         DC    X'10040500',C'R'                                         00078800
         DC    X'11040500',C'W'                                         00078900
         DC    X'12040500',C'Y'                                         00079000
         DC    X'13080500',C'S'                                         00079100
         DC    X'14080500',C'I'                                         00079200
         DC    X'15080500',C'J'                                         00079300
         DC    X'16080500',C'H'                                         00079400
         DC    X'17080500',C'T'                                         00079500
         DC    X'2F200500',C'X'                                         00079600
         DC    X'18080501',C'.T'                                        00079700
         DC    X'0C0400',C'?'                                           00079800
         DC    X'100400',C'F'                                           00079900
         DC    X'140400',C'Z'                                           00080000
         DC    X'180400',C'-'                                           00080100
         DC    X'1C0000',C' '                                           00080200
         DC    X'18'                                                    00080300
DFTABLE  DC    X'0400',C'@'                                             00080400
         DC    X'0C0400',C'$'                                           00080500
         DC    X'000400',C'N'                                           00080600
         DC    X'000400',C'C'                                           00080700
         DC    X'000400',C'A'                                           00080800
         DC    X'000400',C'D'                                           00080900
         DC    X'000400',C'K'                                           00081000
         DC    X'000400',C'Y'                                           00081100
         DC    X'080400',C'S'                                           00081200
         DC    X'000400',C'I'                                           00081300
         DC    X'000400',C'J'                                           00081400
         DC    X'040400',C'H'                                           00081500
         DC    X'140400',C'X'                                           00081600
         DC    X'100000',C'+'                                           00081700
         DC    X'0100'                                                  00081800
PTABLE   DC    X'0904',C'TITLE'                                         00081900
         DC    X'02000C07',C'SUBTITLE'                                  00082000
         DC    X'03000904',C'EFOOT'                                     00082100
         DC    X'04000904',C'OFOOT'                                     00082200
         DC    X'05180A05',C'SETTAB'                                    00082300
         DC    X'06000B06',C'HYPHALT'                                   00082400
         DC    X'07000A06',C'HYPHCLR'                                   00082500
         DC    X'040B06',C'DEFINE?'                                     00082600
         DC    X'19080803',C'JUST'                                      00082700
         DC    X'1A080904',C'FRONT'                                     00082800
         DC    X'1C080904',C'HEADB'                                     00082900
         DC    X'1D080904',C'SPELL'                                     00083000
         DC    X'1E080A05',C'DOUBLE'                                    00083100
         DC    X'1F080A05',C'HYPHEN'                                    00083200
         DC    X'20080A05',C'NOHYPH'                                    00083300
         DC    X'21080A05',C'NOJUST'                                    00083400
         DC    X'22080A05',C'SINGLE'                                    00083500
         DC    X'2A080E09',C'COLJUSTOFF'                                00083600
         DC    X'24080B06',C'COLJUST'                                   00083700
         DC    X'230C0A05',C'SWIDTH'                                    00083800
         DC    X'250C0803',C'PAGE'                                      00083900
         DC    X'260C0904',C'DEPTH'                                     00084000
         DC    X'270C0A05',C'DWIDTH'                                    00084100
         DC    X'280C0A05',C'LENGTH'                                    00084200
         DC    X'290C0A05',C'MARGIN'                                    00084300
         DC    X'30100703',C'DATE'                                      00084400
         DC    X'140400',C'+'                                           00084500
         DC    X'1C0703',C'LIST'                                        00084600
         DC    X'200000',C' '                                           00084700
         LTORG                                                          00084800
TRTDELIM DC    X'04080C',XL253'0'                                       00084900
         ORG   TRTDELIM+C'+'                                            00085000
         DC    X'10'                                                    00085100
         ORG   TRTDELIM+C'-'                                            00085200
         DC    X'14'                                                    00085300
         ORG   TRTDELIM+C'*'                                            00085400
         DC    X'18'                                                    00085500
         ORG   TRTDELIM+C'@'                                            00085600
         DC    X'1C'                                                    00085700
         ORG   TRTDELIM+C'$'                                            00085800
         DC    X'20'                                                    00085900
         ORG   TRTDELIM+C'/'                                            00086000
         DC    X'24'                                                    00086100
         ORG                                                            00086200
COUNT    DC    D'0'                                                     00086300
RETCODE  DC    F'0'     FOR RETURN CODE (NATCH)                         00086400
SAVEL    DC    2F'0'                                                    00086500
BLOCK    DC    5F'0'                                                    00086600
STANDORD DC    X'0100000000000001' CHARACTER STRING ORDER               00086700
AORD     DC    X'0A00000A'         SHORT FORMAT ORDER                   00086800
NORD     DC    X'0900000000000009' LONG FORMAT ORDER                    00086900
         DC    X'06'                                                    00087000
LABEL    DC    CL6' ',X'06'        LABEL ORDER                          00087100
FORD     DC    X'030600000000000000000003' LINK ORDER                   00087200
INCR     DC    F'0'                                                     00087300
PAGESIZE DC    F'0'                                                     00087400
SAVEM    DC    2F'0'                                                    00087500
SAVE     DS    2F                                                       00087600
DTABLE   DS    120F                                                     00087700
         DS    12F                                                      00087800
INAREA   DC    XL154'02',CL6' ',XL80'0',C'/ '                           00087900
BYTE2    DC    H'0'                                                     00088000
LABSAVE  DC    CL6' '                                                   00088100
SWITCH   DC    X'8E00'                                                  00088200
STRING   DC    CL10' '                                                  00088300
*****                                                                   00088400
* SWITCH 80    NEW ORDER FOR NEXT CHARACTER STRING                      00088500
*        40    STRING ENDS ONLY AT +, -, OR EOF                         00088600
*        20    BETWEEN + SIGNS                                          00088700
*        10    BETWEEN - SIGNS                                          00088800
*        08    NEW AREA NEEDED AT NEXT ORDER                            00088900
*        04    NEW PAGE NEEDED AT NEXT ORDER                            00089000
*        02 XOR 04 SHUT DOWN CURRENT PAGE AT NEXT ORDER                 00089100
*        01    FOOTNOTE IN PROGRESS                                     00089200
* + 1    80    CHARACTER STRINGS, *, @, AND $ ALL IGNORED               00089300
*        40    LAST -?N- HAD H BIT SET                                  00089400
*        20    FOOTNOTE JUST ENDED                                      00089500
*        10    S SCANNED AS PART OF CURRENT +DEFINE?N=...+              00089600
*        08    WITH 20, FILL IN LABTABLE FOR LAST LABLE                 00089700
         END   TXT360IN                                                 00089800
